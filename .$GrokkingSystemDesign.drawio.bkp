<mxfile host="Electron" modified="2024-05-29T05:00:40.674Z" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/24.4.8 Chrome/124.0.6367.207 Electron/30.0.6 Safari/537.36" etag="-nt7Getef2JDXcL9tI_j" version="24.4.8" type="device">
  <diagram name="Page-1" id="mqSlGxhzuqs3_dw6EDk-">
    <mxGraphModel dx="5818" dy="4728" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-10" value="" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1417" y="89" width="133" height="467" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-12" value="" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1436.5" y="161" width="94" height="41" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-21" value="" style="whiteSpace=wrap;html=1;dashed=1;strokeWidth=3;" parent="1" vertex="1">
          <mxGeometry x="490.5" y="158" width="389" height="470" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-20" value="" style="whiteSpace=wrap;html=1;dashed=1;strokeWidth=3;" parent="1" vertex="1">
          <mxGeometry x="-22" y="155" width="389" height="470" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-9" value="" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-431.5" y="210" width="224" height="230" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-8" value="" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-820" y="210" width="224" height="230" as="geometry" />
        </mxCell>
        <mxCell id="sw1e_gQs27e_M16vDIyy-1" value="&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;b&gt;&lt;u&gt;(CHAPTER 2) SYSTEM DESIGN INTERVIEWS&amp;nbsp;&lt;/u&gt;&lt;/b&gt;&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;b&gt;Rule of thumb is when some aspect of the system increases by a factor of 10 or more, the same design might not hold and might require change&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Distributed systems refresh is recommended for this course&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Robustness (maintain operations during a crisis)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Scalability&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Availability&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Performance&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Extensibility&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Resiliency (ability to return to normal operations over an acceptable period of time post disruption&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Ask WHY the system works&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;learn how popular apps work at a high level&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;ask why x component was used instead of y component&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;build serious side projects&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;build a system from scratch&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Perform Well During Interview&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Recommended steps to include&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Ask Refining Questions&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;put on product manager hat and prioritize main features&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;go on a journey about why our design is good&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Divide into functional and non-functional requirements&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;FUNCTIONAL = requirements clients need directly&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;e.g. send messages to friends in real time&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;NON FUNCTIONAL = indirect needs&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;e.g. messaging performance shouldn&#39;t degrade with increasing user load&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Handle The Data&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Understand data to look for appropriate data storage systems and processing components&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;important questions to ask ourself&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;What&#39;s the size of data right now ?&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;What rate is data expected to grow over time?&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;How will the data be consumed by other subsystems or end users?&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Is the data read heavy or write heavy?&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Do we need strict consistency or eventual consistency?&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Durability target of data?&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Privacy and regulatory requirements do we require for storing or transmitting user data?&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Discuss The Componenets&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;e.g. front end components&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;load balancers&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;caches&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;databases&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;CDN&#39;s&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Firewalls&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;etc...&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Discuss The Tradeoffs&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;have a follow up plan to tackle any weakness within design&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;point out weakness in our design&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;something is always failing - we must integrate fault tolerance and security in our design&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Evaluation&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Steps to build large scale distributed systems&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Determine system requirements and constraints&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Recognize components&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Generate Design&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Identify shortcomings in the initial design&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Discuss trade-offs and improve iteratively&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-820" y="-1077" width="1030" height="991" as="geometry" />
        </mxCell>
        <mxCell id="sw1e_gQs27e_M16vDIyy-2" value="&lt;div style=&quot;text-align: left; font-size: 14px;&quot;&gt;&lt;b style=&quot;background-color: initial;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;&lt;u&gt;(CHAPTER 3) ABSTRACTION&amp;nbsp;&lt;/u&gt;&lt;/font&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;ul style=&quot;&quot;&gt;&lt;li style=&quot;text-align: left;&quot;&gt;Art of removing details we do&amp;nbsp; not need; concentrate on the big picture&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;Remote Procedure Calls (RPC)&lt;/li&gt;&lt;ul&gt;&lt;li style=&quot;text-align: left;&quot;&gt;hiding complexities of packing and sending function arguments to remote server, receiving the return values, and managing any network retries&amp;nbsp;&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;interprocess communication protocol&amp;nbsp;&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;RPC mechanisms employed when computer program causes a procedure to execute in a separate address space&amp;nbsp;&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;similar to REST API communication&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="-790" width="987" height="158" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-2" value="DIAGRAM OF HOW RPC WORKS" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="-790" y="176" width="204" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-3" value="CLIENT" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-784" y="257" width="137" height="50" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-5" value="CLIENT STUB" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-784" y="326" width="137" height="50" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-6" value="SERVER" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-388" y="257" width="137" height="50" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-7" value="SERVER STUB" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-388" y="326" width="137" height="50" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-10" value="RPC RUNTIME" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-667" y="528" width="320" height="113" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-11" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.286;entryY=1.004;entryDx=0;entryDy=0;entryPerimeter=0;startArrow=classic;startFill=1;" parent="1" source="9GiX7k3YX_MBMq_r-eMD-10" target="9GiX7k3YX_MBMq_r-eMD-8" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="-756" y="585" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-12" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;startArrow=classic;startFill=1;" parent="1" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="-347" y="577.5699999999999" as="sourcePoint" />
            <mxPoint x="-291" y="449" as="targetPoint" />
            <Array as="points">
              <mxPoint x="-290.51" y="578" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-13" value="" style="edgeStyle=none;orthogonalLoop=1;jettySize=auto;html=1;shape=flexArrow;rounded=1;startSize=8;endSize=8;" parent="1" edge="1">
          <mxGeometry width="100" relative="1" as="geometry">
            <mxPoint x="-166" y="308" as="sourcePoint" />
            <mxPoint x="-66" y="308" as="targetPoint" />
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-14" value="RETURN&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;CALL" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="15" y="224" width="311" height="60" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-15" value="UNPACK&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;PACK" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="15" y="350" width="311" height="60" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-34" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.75;exitY=1;exitDx=0;exitDy=0;" parent="1" source="9GiX7k3YX_MBMq_r-eMD-16" target="9GiX7k3YX_MBMq_r-eMD-17" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="248" y="744" />
              <mxPoint x="608" y="744" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-16" value="RECEIVE&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;SEND" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="15" y="488" width="311" height="60" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-36" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.75;exitY=1;exitDx=0;exitDy=0;" parent="1" source="9GiX7k3YX_MBMq_r-eMD-17" target="9GiX7k3YX_MBMq_r-eMD-16" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="755" y="822" />
              <mxPoint x="96" y="822" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-17" value="RECEIVE&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;SEND" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="522" y="488" width="311" height="60" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-18" value="UNPACK&amp;nbsp;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;PACK" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="525" y="344" width="311" height="60" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-19" value="RETURN&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;CALL" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="522" y="224" width="311" height="60" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-22" value="" style="shape=singleArrow;whiteSpace=wrap;html=1;arrowWidth=0.4;arrowSize=0.4;direction=south;" parent="1" vertex="1">
          <mxGeometry x="228" y="410" width="60" height="80" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-24" value="" style="shape=singleArrow;whiteSpace=wrap;html=1;arrowWidth=0.4;arrowSize=0.4;direction=south;" parent="1" vertex="1">
          <mxGeometry x="224" y="279" width="60" height="80" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-25" value="" style="shape=singleArrow;whiteSpace=wrap;html=1;arrowWidth=0.4;arrowSize=0.4;direction=south;" parent="1" vertex="1">
          <mxGeometry x="733" y="279" width="60" height="80" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-26" value="" style="shape=singleArrow;whiteSpace=wrap;html=1;arrowWidth=0.4;arrowSize=0.4;direction=south;" parent="1" vertex="1">
          <mxGeometry x="733" y="410" width="60" height="80" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-27" value="" style="shape=singleArrow;whiteSpace=wrap;html=1;arrowWidth=0.4;arrowSize=0.4;direction=north;" parent="1" vertex="1">
          <mxGeometry x="70" y="408" width="60" height="80" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-28" value="" style="shape=singleArrow;whiteSpace=wrap;html=1;arrowWidth=0.4;arrowSize=0.4;direction=north;" parent="1" vertex="1">
          <mxGeometry x="70" y="274" width="60" height="80" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-29" value="" style="shape=singleArrow;whiteSpace=wrap;html=1;arrowWidth=0.4;arrowSize=0.4;direction=north;" parent="1" vertex="1">
          <mxGeometry x="574" y="408" width="60" height="80" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-30" value="" style="shape=singleArrow;whiteSpace=wrap;html=1;arrowWidth=0.4;arrowSize=0.4;direction=north;" parent="1" vertex="1">
          <mxGeometry x="574" y="274" width="60" height="80" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-35" value="CALL PACKET" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="384" y="711" width="98" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-37" value="RECEIVE PACKET" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="384" y="790" width="121" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-38" value="CLIENT" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="142" y="190" width="61" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-40" value="SERVER" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="644" y="190" width="67" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-41" value="&lt;b&gt;&lt;i&gt;CLIENT MACHINE&lt;/i&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="94" y="129" width="121" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-42" value="&lt;b&gt;&lt;i&gt;SERVER MACHINE&lt;/i&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="599" y="129" width="126" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-43" value="&lt;b&gt;&lt;font color=&quot;#ff6666&quot; style=&quot;font-size: 28px;&quot;&gt;2&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="294" y="427" width="34" height="46" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-44" value="&lt;b&gt;&lt;font color=&quot;#ff6666&quot; style=&quot;font-size: 28px;&quot;&gt;1&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="288" y="291" width="34" height="46" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-45" value="&lt;b&gt;&lt;font color=&quot;#ff6666&quot; style=&quot;font-size: 28px;&quot;&gt;4&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="531" y="432" width="34" height="46" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-46" value="&lt;b&gt;&lt;font color=&quot;#ff6666&quot; style=&quot;font-size: 28px;&quot;&gt;3&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="344" y="696" width="34" height="46" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-47" value="&lt;b&gt;&lt;font color=&quot;#ff6666&quot; style=&quot;font-size: 28px;&quot;&gt;7&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="813" y="427" width="34" height="46" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-48" value="&lt;b&gt;&lt;font color=&quot;#ff6666&quot; style=&quot;font-size: 28px;&quot;&gt;6&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="806" y="291" width="34" height="46" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-49" value="&lt;b&gt;&lt;font color=&quot;#ff6666&quot; style=&quot;font-size: 28px;&quot;&gt;5&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="533" y="294" width="34" height="46" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-50" value="&lt;b&gt;&lt;font color=&quot;#ff6666&quot; style=&quot;font-size: 28px;&quot;&gt;9&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="22" y="427" width="34" height="46" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-51" value="&lt;b&gt;&lt;font color=&quot;#ff6666&quot; style=&quot;font-size: 28px;&quot;&gt;8&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="342" y="770" width="34" height="46" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-52" value="&lt;b&gt;&lt;font color=&quot;#ff6666&quot; style=&quot;font-size: 28px;&quot;&gt;10&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="2" y="294" width="49" height="46" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-54" value="&lt;ol&gt;&lt;li&gt;Client initiates client stub process by giving params; client stub is stored in the address space of client&amp;nbsp;&lt;/li&gt;&lt;li&gt;Client stub converts params into standard format and packs into message; then makes a request for the RPC runtime to send the message to server&lt;/li&gt;&lt;li&gt;Message delivered over network; waits for message result from server&lt;/li&gt;&lt;li&gt;Message is received from server RPC runtime and moves it to server stub&lt;/li&gt;&lt;li&gt;Server stub unpacks message; takes params out; calls server routine to do required execution&lt;/li&gt;&lt;li&gt;result is returned to server stub&lt;/li&gt;&lt;li&gt;server srub packs and sends result packet to RPC runtime&amp;nbsp;&lt;/li&gt;&lt;li&gt;RPC runtime at service level returns the results to RPC runtime at client&amp;nbsp;&lt;/li&gt;&lt;li&gt;client RPC runtime receives the result and sends to client stub&amp;nbsp;&lt;/li&gt;&lt;li&gt;client srub unpacks result, execution process returns to the caller&lt;/li&gt;&lt;/ol&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="-6" y="829" width="846" height="180" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-55" value="SERVER STUB" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="634" y="311" width="102" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-56" value="RPC RUNTIME" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="114" y="462" width="101" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-57" value="CLIENT STUB" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="122.5" y="318" width="96" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-58" value="RPC RUNTIME" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="627" y="464" width="101" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-60" value="" style="edgeStyle=none;orthogonalLoop=1;jettySize=auto;html=1;rounded=0;" parent="1" edge="1">
          <mxGeometry width="100" relative="1" as="geometry">
            <mxPoint x="638" y="253.40999999999997" as="sourcePoint" />
            <mxPoint x="738" y="253.40999999999997" as="targetPoint" />
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-61" value="" style="edgeStyle=none;orthogonalLoop=1;jettySize=auto;html=1;rounded=0;" parent="1" edge="1">
          <mxGeometry width="100" relative="1" as="geometry">
            <mxPoint x="224" y="517.4099999999999" as="sourcePoint" />
            <mxPoint x="124" y="517.4099999999999" as="targetPoint" />
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-62" value="WAIT" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="152" y="496" width="48" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-63" value="EXECUTE" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="643" y="231" width="75" height="26" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-64" value="&lt;b style=&quot;font-size: 14px;&quot;&gt;&lt;u style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;(CHAPTER 3 CONTINUED) ABSTRACTION&lt;/font&gt;&lt;/u&gt;&lt;/b&gt;&lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;div style=&quot;&quot;&gt;&lt;ul style=&quot;&quot;&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;RPC used in many real world services&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;Google&lt;/li&gt;&lt;ul&gt;&lt;li&gt;uses RPC in distributed infra&lt;/li&gt;&lt;li&gt;developed gRPC - open source framework using RPC to build effificent and highly performany distributed systems&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Uber&lt;/li&gt;&lt;ul&gt;&lt;li&gt;uses RPC real time location tracking, ride matching, communication between drivers and riders&amp;nbsp;&lt;/li&gt;&lt;li&gt;facilitate data exchange between user&#39;s app and server&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Facebook&lt;/li&gt;&lt;ul&gt;&lt;li&gt;most services written using thrift for RPC&lt;/li&gt;&lt;li&gt;enables interoperability between different languages&lt;/li&gt;&lt;li&gt;e.g. pyuthon client communicating with c++ server&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="-784" y="670" width="794" height="230" as="geometry" />
        </mxCell>
        <mxCell id="9GiX7k3YX_MBMq_r-eMD-65" value="&lt;b style=&quot;font-size: 14px;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;&lt;u&gt;(CHAPTER 4) NON-FUNCTIONAL SYSTEM CHARACTERISTICS&lt;/u&gt;&lt;/font&gt;&lt;/b&gt;&lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;div style=&quot;&quot;&gt;&lt;ul style=&quot;&quot;&gt;&lt;li&gt;AVAILABILITY&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;percentage of time some service is accessible to clients and operates under normal conditions&lt;/li&gt;&lt;li&gt;e.g. service has 100% availability = responds as intended all the time&amp;nbsp;&lt;/li&gt;&lt;li&gt;Measuring availability&lt;/li&gt;&lt;ul&gt;&lt;li&gt;A (in percent) = ( ( total time - amount of time service was down ) / total time ) * 100&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;We measure availability as a number of nines&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;e.g. 90% (1 nines) &amp;gt;&amp;gt; 36.5 days (downtown per year) &amp;gt;&amp;gt; 72 hours (downtown per month) &amp;gt;&amp;gt; 16.8 hours (downtime per week)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;e.g. 99.9% (3 nines) &amp;gt;&amp;gt; 8.76 hours (downtown per year) &amp;gt;&amp;gt; 43.8 mins (downtown per month) &amp;gt;&amp;gt; 110.1 m ins (downtime per week)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;e.g. 99.999% (5 nines) &amp;gt;&amp;gt; 5.26 mins (downtown per year) &amp;gt;&amp;gt; 25.9 secs (downtown per month) &amp;gt;&amp;gt;  6.05 secs (downtime per week)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;e.g. 99.99999% (7 nines) &amp;gt;&amp;gt; 3.15 secs (downtown per year) &amp;gt;&amp;gt; 0.259 secs (downtown per month) &amp;gt;&amp;gt; 0.0605 secs (downtime per week)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Planned downtime excluded from calculations&amp;nbsp;&lt;/li&gt;&lt;li&gt;down time due to cyber attacks might not be incorporated&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;RELIABILITY&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;probability service will perform its function for a specified time R&lt;/li&gt;&lt;li&gt;use mean time between failures (MTBF) and mean time to repair (MTTR) metrics to measure R&lt;/li&gt;&lt;ul&gt;&lt;li&gt;MTBF = ( Total elapsed time - sum of downtime ) / total number of failures&amp;nbsp;&lt;/li&gt;&lt;li&gt;MTTR = Total Maintenance Time / Total number of repairs&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;reliability and availability 2 important metrics to measure compliance of agreed SLO (Service Level Objectives)&lt;/li&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;SCALABILITY&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;ability of system to handle increasing workload without compromising performance&amp;nbsp;&lt;/li&gt;&lt;li&gt;e.g. search engine must accommodate increase number of users as well as amount of data&amp;nbsp;&lt;/li&gt;&lt;li&gt;workloads van veary&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;request workload = number of requests served by system&amp;nbsp;&lt;/li&gt;&lt;li&gt;data/ storage workload = amount of data stored by system&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Vertical scalability = scaling UP&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;additional CPU&#39;s or RAM&lt;/li&gt;&lt;li&gt;we can only grow to the limitations of our server&amp;nbsp;&lt;/li&gt;&lt;li&gt;dollar cost usually HIGH&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Horizontal scalability = scaling OUT&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;increasing number of machines in the network&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;commodity nodes for great dollar cost benefits&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;catch is build a system such that many nodes could collectively work as if we had a single huge server&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;MAINTAINABILITY&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;keeping system up and running by finding and fixing bugs, adding new functionalities, keeping platform updated, etc..&lt;/li&gt;&lt;li&gt;measuring maintainability&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;M is the probability the service will restore its function within a specified time of fault occurrence&lt;/li&gt;&lt;li&gt;Mean Time To Repair (MTTR)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;MTTR = Total maintenance time / total number of repairts&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;goal is to have as low a value as possible for MTTR&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;FAULT TOLERANCE&amp;nbsp;&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;avoiding a single point of failure (SPOF)&lt;/li&gt;&lt;li&gt;refers to system&#39;s ability to execute persistently even if one or more components fail&amp;nbsp;&lt;/li&gt;&lt;li&gt;techniques for most designs&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;REPLICATION&lt;/li&gt;&lt;ul&gt;&lt;li&gt;e.g. database replication&amp;nbsp;&lt;/li&gt;&lt;li&gt;swap out failed nodes with healthy ones and failed data stores with it&#39;s replica&lt;/li&gt;&lt;li&gt;we compromise either availability or consistency under failures (CAP THEOREM)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;CHECK POINTING&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;think of a gaming save point&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="-846" y="1102" width="918" height="852" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-1" value="(CHAPTER 5) BACK OF THE ENVELOPE CALCULATIONS&lt;div&gt;&lt;ul&gt;&lt;li&gt;BOTEC involve swift, approcx. and simplified estimates of the back of an envelope&lt;/li&gt;&lt;li&gt;function as quick and preliminary evaluation of crucial parameters&amp;nbsp;&lt;/li&gt;&lt;li&gt;examples of when we need to use BOTEC&lt;/li&gt;&lt;ul&gt;&lt;li&gt;number of concurrent TCP connections a server can support&amp;nbsp;&lt;/li&gt;&lt;li&gt;number of requests per second (RPS) a web, dtaabase, or cache server can handle&amp;nbsp;&lt;/li&gt;&lt;li&gt;storaghe requirements of a service&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Types of data center servers&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;WEB SERVER&lt;/li&gt;&lt;ul&gt;&lt;li&gt;RAM (LOW) - PROCESSOR (HIGH) - HARD DRIVE (LOW)&lt;/li&gt;&lt;li&gt;decoupled from app servers&amp;nbsp;&lt;/li&gt;&lt;li&gt;first point of contact after load balancers&amp;nbsp;&lt;/li&gt;&lt;li&gt;usually handle api calls form clients&amp;nbsp;&lt;/li&gt;&lt;li&gt;require good processing resources&amp;nbsp;&lt;/li&gt;&lt;li&gt;e.g. facebook used a web server with 32 GB of RAM and 500 GB storage space in the past&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;APPLICATION SERVER&lt;/li&gt;&lt;ul&gt;&lt;li&gt;RAM (HIGH) - PROCESSOR (MEDIUM) - HIGH DRIVE (HIGH)&lt;/li&gt;&lt;li&gt;provide dynamic content whereas web servers serve static content to the client&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;STORAGE SERVER&lt;/li&gt;&lt;ul&gt;&lt;li&gt;RAM (LOW) - PROCESSOR (MEDIUM) - HARD DRIVE (HIGH)&lt;/li&gt;&lt;li&gt;e.g. youtube uses following data stores&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;blob storage = encoded videos&amp;nbsp;&lt;/li&gt;&lt;li&gt;temp processing queue storage = hold few hundred hours of vid content uploaded daily tdb processing&amp;nbsp;&lt;/li&gt;&lt;li&gt;bigtable = specialized for storing large number of thumbnails&amp;nbsp;&lt;/li&gt;&lt;li&gt;relational database management system = user and video metadata (comments, likes, etc...)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;important rates of queries per second (QPD)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;handled by MySQL = 1000&lt;/li&gt;&lt;li&gt;handled by key value store = 10,000&lt;/li&gt;&lt;li&gt;handled by cache server = 100,000 - 1,000,000&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Request types&lt;/li&gt;&lt;ul&gt;&lt;li&gt;CPU bound = primarily depend on the processor of a node&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;e.g. CPU bound request compress 1KB of data as a snzip = 3 microseconds&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;MEMORY bound = bottlenecked by memory subsystem&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;e.g. reading 1 MB data from RAM = 9 microseconds (3 times slower than CPU)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;if CPU bound request takes X time units to complete, then memory bound workloads are an order of magniturde slower (10X) and IO is two orders of magnitude slower (100X)&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;Examples of resource estimations&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;services needed at peak = ( # of requests / second ) / RPS of server&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;e.g. 10 billion / 64000 = 157,000&lt;/li&gt;&lt;li&gt;uf 175 K servers isn&#39;t plausdible, we have potential paths&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;improiving the RPS of a server&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;assuming we can employ 100,000 servers at most&lt;/li&gt;&lt;li&gt;10 billion / 100,000 = 100,000 RPS&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;improving over the peak load assumption&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;can use patero principle aka 80/20 rule&amp;nbsp;&lt;/li&gt;&lt;li&gt;suggests 80% of effects come from 20% of the causes&amp;nbsp;&lt;/li&gt;&lt;li&gt;translate 80% of peak traffic occurs within 20% of the time (e.g. 4-8 hour window in 24 hours)&lt;/li&gt;&lt;li&gt;(( 0.8 * 10 billion ) / (4.8 * 60 * 60 seconds) ) / 64000 = 8 servers&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;if tghe load gets higher than predicted techniques like losad-shedding, circuit breakers, and throttlling can be employed&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;Storage requirements&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;e.g. using twitter let&#39;s assume we have 500 M DAU - post 3 tweets a day - 10% contain images 5% video&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;image size 200KB video is 3MB&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;tweet text and metadate 250 bytes&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;255 TB total storage would be required&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Total storage = 0.375 TB + 30 TB + 255 TB = 255 TB&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Storage required for 1 year = 365 * 255TB = 93.08 PB&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="-846" y="1947" width="1104" height="828" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-2" value="&lt;b style=&quot;font-size: 14px;&quot;&gt;&lt;u style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;(CHAPTER 6) INTRODUCTION TO BUILDING BLOCKS&lt;/font&gt;&lt;/u&gt;&lt;/b&gt;&lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;ol style=&quot;&quot;&gt;&lt;li&gt;DOMAIN NAME SYSTEM&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;focus on how to design hierarchical and distributed naming systems&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;LOAD BALANCERS&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;understand the design of load balancers&amp;nbsp;&lt;/li&gt;&lt;li&gt;used to fairly distribute incoming clients requests among a pool of available servers&amp;nbsp;&lt;/li&gt;&lt;li&gt;reduces load and can bypass failed servers&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;DATABASES&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;enables us to store, retrieve, modify, and delete data in connection with data processing procedures&amp;nbsp;&lt;/li&gt;&lt;li&gt;discuss types, replication, partitioning, and analysis&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;KEY-VALUE STORE&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;non relational database stores data in key value pair&amp;nbsp;&lt;/li&gt;&lt;li&gt;explain design and important concepts such as achieving scalability, durability, and configurability&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;CONTENT DELIVERY NETWORK&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;design CDN that&#39;s used to keep viral content such as videos, images, audio, and web pages&lt;/li&gt;&lt;li&gt;efficiently delivers content to end users while reducing latency and burden on data centers&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;SEQUENCER&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;unique id generator with major focus on maintaining causality&amp;nbsp;&lt;/li&gt;&lt;li&gt;explain 3 different methods for generating unique ids&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;SERVICE MONITORING&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;monitoring systems useful for early warnings&lt;/li&gt;&lt;li&gt;build server and client side scenarios&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;DISTRIBUTED CACHING&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;multiple cache servers coordinate to store frequently accessed data&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;DISTRIBUTED MESSAGING QUEUE&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;focus on design of queue consisting of multiple servers used between interacting entities called producers and consumers&amp;nbsp;&lt;/li&gt;&lt;li&gt;helps decouple producers and consumers, result in independent scalabilty, and enhance reliability&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;PUBLISH SUBSCRIBE SYSTEM&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;design and asynchronous service to service communication called a pub sub system&amp;nbsp;&lt;/li&gt;&lt;li&gt;popular in serverless, microservices architecture and data processing systems&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;RATE LIMITER&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;design a system that throttles incoming requests for a service based on predefined limit&amp;nbsp;&lt;/li&gt;&lt;li&gt;generally used as defensive layer for services to avoid their excessive usage&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;BLOB STORE&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;focus on storage solution for unstructured data&amp;nbsp;&lt;/li&gt;&lt;li&gt;e.g. multimedia files and binary executables&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;DISTRIBUTED SEARCH&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;search system takes a query and return relevant content in a few seconds or less&amp;nbsp;&lt;/li&gt;&lt;li&gt;focuses on 3 components&amp;nbsp;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;crawl&amp;nbsp;&lt;/li&gt;&lt;li&gt;index&lt;/li&gt;&lt;li&gt;search&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;DISTRIBUTED LOGIGNG&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;I/O intensive operation that is time consuming and slow&lt;/li&gt;&lt;li&gt;allow services in distributed system to log their events efficiently&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;DISTRIBUTED TASK SCHEDULING&amp;nbsp;&lt;/li&gt;&lt;ol style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;task scheduler system mediates between tasks and resources&amp;nbsp;&lt;/li&gt;&lt;li&gt;allocates resources to tasks to meet task level and system level goals&amp;nbsp;&lt;/li&gt;&lt;li&gt;often used to offload background processing to be completed asynchrously&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="908" y="-1065" width="802" height="822" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-3" value="&lt;b style=&quot;font-size: 14px;&quot;&gt;&lt;u style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;(CHAPTER 7) - DOMAIN NAME SYSTEMS (DNS)&lt;/font&gt;&lt;/u&gt;&lt;/b&gt;&lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;strong style=&quot;background-color: initial; box-sizing: border-box; --tw-shadow: 0 0 transparent; --tw-ring-inset: var(--tw-empty,/*!*/ /*!*/); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,0.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent;&quot;&gt;&lt;em style=&quot;box-sizing: border-box; --tw-shadow: 0 0 transparent; --tw-ring-inset: var(--tw-empty,/*!*/ /*!*/); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,0.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent;&quot;&gt;Main 4 types of servers in hierarchy&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;DNS resolver&lt;/li&gt;&lt;li&gt;root level name servers&lt;/li&gt;&lt;li&gt;top level domain name servers&lt;/li&gt;&lt;li&gt;authoritative name servers&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DNS is a distributed system&lt;/span&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;avoids single point of failure&lt;/li&gt;&lt;li&gt;achieves low query latency&lt;/li&gt;&lt;li&gt;higher degree of flexibility&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;3 main things make DNS a reliable system&lt;/span&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;caching&lt;/li&gt;&lt;li&gt;server replication&lt;/li&gt;&lt;li&gt;Protocol&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DNS provides eventual consistency and updates records on replicated servers lazily&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Consistency can also suffer because of caching&lt;/span&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;time to live TTL comes with cached record&lt;/li&gt;&lt;ol&gt;&lt;li&gt;small value to be as close to consistent&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="1748" y="-1065" width="504" height="314" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-4" value="&lt;b style=&quot;font-size: 14px;&quot;&gt;&lt;u style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;(CHAPTER 8) LOAD BALANCERS&lt;/font&gt;&lt;/u&gt;&lt;/b&gt;&lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;ul style=&quot;&quot;&gt;&lt;li&gt;job of load balancer is to fairly divide all client&#39;s requests among the pool of available servers&amp;nbsp;&lt;/li&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;perform this job to avoid crashing servers&amp;nbsp;&lt;/li&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;first point of contact within a data center after the firewall&lt;/li&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;for increasing client requests provides&amp;nbsp;&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;SCALABILITY&lt;/li&gt;&lt;ul&gt;&lt;li&gt;capacity of app can be increased seamlessly&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AVAILABILITY&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;even if some servers go down system will still remain available&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;PERFORMANCE&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;forward requests to servers with a lesser load for quicker user response time&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="969" y="-208" width="634" height="214" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-35" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.25;entryY=0;entryDx=0;entryDy=0;" parent="1" source="YJ1gf5-1OZ7Gh3wi9tnh-5" target="YJ1gf5-1OZ7Gh3wi9tnh-9" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-5" value="USER 1" style="ellipse;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1000" y="105" width="80" height="80" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-31" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.25;entryDx=0;entryDy=0;" parent="1" source="YJ1gf5-1OZ7Gh3wi9tnh-6" target="YJ1gf5-1OZ7Gh3wi9tnh-9" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-6" value="USER 1" style="ellipse;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1000" y="222" width="80" height="80" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-34" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.25;entryY=1;entryDx=0;entryDy=0;" parent="1" source="YJ1gf5-1OZ7Gh3wi9tnh-7" target="YJ1gf5-1OZ7Gh3wi9tnh-9" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-7" value="USER 1" style="ellipse;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1000" y="349" width="80" height="80" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-33" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" parent="1" source="YJ1gf5-1OZ7Gh3wi9tnh-8" target="YJ1gf5-1OZ7Gh3wi9tnh-9" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-8" value="USER 1" style="ellipse;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1000" y="480" width="80" height="80" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-36" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.25;exitDx=0;exitDy=0;entryX=0;entryY=0.75;entryDx=0;entryDy=0;" parent="1" source="YJ1gf5-1OZ7Gh3wi9tnh-9" target="YJ1gf5-1OZ7Gh3wi9tnh-12" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-37" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.75;entryDx=0;entryDy=0;" parent="1" source="YJ1gf5-1OZ7Gh3wi9tnh-9" target="YJ1gf5-1OZ7Gh3wi9tnh-15" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-38" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.75;exitDx=0;exitDy=0;entryX=0;entryY=0.75;entryDx=0;entryDy=0;" parent="1" source="YJ1gf5-1OZ7Gh3wi9tnh-9" target="YJ1gf5-1OZ7Gh3wi9tnh-17" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-9" value="LOAD BALANCER" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1195" y="302" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-14" value="" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1460.5" y="176" width="46" height="11" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-15" value="" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1436.5" y="299.5" width="94" height="41" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-16" value="" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1460.5" y="317" width="46" height="11" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-17" value="" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1436.5" y="449.5" width="94" height="41" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-18" value="" style="whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1460.5" y="464.5" width="46" height="11" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-25" value="SERVER POOL" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontStyle=3" parent="1" vertex="1">
          <mxGeometry x="1431.5" y="87" width="104" height="26" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-26" value="&lt;b&gt;&lt;i style=&quot;&quot;&gt;SIMPLIFIED WORKING OF A LOAD BALANCER&lt;/i&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="1105" y="24" width="287" height="26" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-27" value="SERVER 1" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="1445" y="202" width="77" height="26" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-28" value="SERVER 2" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="1445" y="345" width="77" height="26" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-29" value="SERVER 3" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="1445" y="493" width="77" height="26" as="geometry" />
        </mxCell>
        <mxCell id="YJ1gf5-1OZ7Gh3wi9tnh-39" value="(CHAPTER 8) LOAD BALANCER CONTINUED&amp;nbsp;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Load balancers can be used between any two services with multiple instances within the design of a system&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;e.g. web servers to app servers to database servers&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Services offered by load balancers&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;health checking e.g. hearbeat protocol&lt;/li&gt;&lt;li&gt;TLS termination (SSL offloading) reduce burden on end servers&amp;nbsp;&lt;/li&gt;&lt;li&gt;predictive analytics to predict traffic patterns&amp;nbsp;&lt;/li&gt;&lt;li&gt;reduced human intervention&amp;nbsp;&lt;/li&gt;&lt;li&gt;service discovery - requests are fwd to appropriate hosting servers by inquiring about the service registry&amp;nbsp;&lt;/li&gt;&lt;li&gt;security - mitigating attacks like denial of service (DOS)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Usually deployed in pairs as means of disaster recovery to avoid SPOF&lt;/li&gt;&lt;li&gt;GSLB - distribution of traffic load across multiple geographical regions&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;DNS is a form of GSLB -- uses round robin method&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;local load balancing - achieved within a data center&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;focus on improving efficiency and resource utilization of hosting servers in data center&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Load balance algorithms&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;round robin scheduling&amp;nbsp;&lt;/li&gt;&lt;li&gt;weighted round robin&amp;nbsp;&lt;/li&gt;&lt;li&gt;least connections&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;newer arriving requests are assigned to servers with fewer existing connections&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;least response tiime&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;preferred for performance sensitive services&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;IP Hash&amp;nbsp;&lt;/li&gt;&lt;li&gt;URL Hash&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Static vs Dynamic algorithms&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Static = do not consider changing state of servers&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;tasks carried out based on existing knowledge&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Dynamic = consider current or recent state of servers&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;in practice provide far better results because maintain a state of serving hosts&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;Stateless vs Stateful Load Balancers&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;stateful load balancing&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;maintaining state of the sessions established between clients and hosting servers&amp;nbsp;&lt;/li&gt;&lt;li&gt;retain a DS maps incoming clients to hosting servers&amp;nbsp;&lt;/li&gt;&lt;li&gt;increase complexity and limit scalability because session information is maintained on all load balancers&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Stateless load balancing&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;maintain no state thus faster and lightweight&amp;nbsp;&lt;/li&gt;&lt;li&gt;use consistent hashing to make fwd decisions&amp;nbsp;&lt;/li&gt;&lt;li&gt;may not be resilient in infra changes, local state may still be required&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;State maintained across different load balancers is considered STATEFUL&lt;/li&gt;&lt;li&gt;state maintained within a load balancer for internal use is considered STATELESS&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Load Balancer deployment&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;single layer load balancer is not enough for a large data center&lt;/li&gt;&lt;li&gt;traditional data center may have a 3 tier load balancer&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="1000" y="639" width="693" height="655" as="geometry" />
        </mxCell>
        <mxCell id="cltM6eKxGFpbqBlGMILz-1" value="&lt;b style=&quot;font-size: 14px;&quot;&gt;&lt;u style=&quot;&quot;&gt;&lt;i style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;(CHAPTER 9) INTRODUCTION TO DATABASES&lt;/font&gt;&lt;/i&gt;&lt;/u&gt;&lt;/b&gt;&lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;ul style=&quot;&quot;&gt;&lt;li&gt;Limitations to using file storage&amp;nbsp;&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;concurrent access to data by multiple users&lt;/li&gt;&lt;li&gt;speed affected by millions of users &amp;gt;&amp;gt; scalability&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;Databases is an organized collection of data that can be managed and accessed easily&amp;nbsp;&lt;/li&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;Relational databases are organized and predetermined schemas&amp;nbsp;&lt;/li&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;Non relational databases like file directories that store anything are unstructured, scattered, and feature a dynamic schema&lt;/li&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;RELATIONAL DATABASES&amp;nbsp;&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;adhere to particular schemas before storing data&amp;nbsp;&lt;/li&gt;&lt;li&gt;organizes data into one or more relations (tables) with unique key for each instance&amp;nbsp;&lt;/li&gt;&lt;li&gt;a Structure Query Language (SQL) is used for manipulating database&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Benefits&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;simplicity&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;robustness&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;flexibility&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;performance&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;scalability (traditional DB are vertically scalable. Vertical scaling has limits where one might reach point when more memory, storage, or network capability can not be added to a single node&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;compatibility&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;ACID (AUTOMICITY, CONSISTENCY, ISOLATION, DURABILITY)&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;AUTOMICITY = atomic unit of transaction - all instructions within a transaction will execute or none of them will execute&lt;/li&gt;&lt;li&gt;CONSISTENCY = remaining consistent in consistent state after every transaction&amp;nbsp;&lt;/li&gt;&lt;li&gt;ISOLATION = ensures concurrent transactions should not interfere with each other&amp;nbsp;&lt;/li&gt;&lt;li&gt;DURABILITY = changes committed to DB should remain even in case of software or system failure&lt;/li&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;Some popular database management systems (DBMS)&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;MySQL&lt;/li&gt;&lt;li&gt;Oracle Database&amp;nbsp;&lt;/li&gt;&lt;li&gt;Microsoft SQL Server&amp;nbsp;&lt;/li&gt;&lt;li&gt;IBM DB2&lt;/li&gt;&lt;li&gt;Postgres&lt;/li&gt;&lt;li&gt;SQLite&lt;/li&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;WHY RELATIONAL DATABASE?&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;BENEFITS&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;greatest powers is its abstractions of ACID transactions and related programming semantics&amp;nbsp;&lt;/li&gt;&lt;li&gt;FLEXIBILITY = provides flexibility to modify the database; Data Defining Language (DDL) allows modify schema while other queries are happening and server is running&amp;nbsp;&lt;/li&gt;&lt;li&gt;REDUCED REDUNDANCY = eliminates data redundancy&lt;/li&gt;&lt;ul&gt;&lt;li&gt;process called normalization which info related to a specific entity appears in one table while relevant data can be linked through foreign key&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;CONCURRENCY = handled through transactional access to the data to avoid inconsistency of data when data is read/ write through many users&lt;/li&gt;&lt;li&gt;INTEGRATION = multiple application integration&lt;/li&gt;&lt;li&gt;BACKUP &amp;amp; DISASTER RECOVERY = guaranteed state of data is consistent at any time; Export/ import makes backup easy&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;DRAWBACKS&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;IMPEDANCE MISMATCH = relational model organizes data into a tabular structure with relations and structure but limited to simple values that can&#39;t be structures/ lists/ objects themselves&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;WHY NON RELATIONAL DATABASE&amp;nbsp;&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;used in apps with large volume of semi-structured and unstructured data, low latency, flexible data models&amp;nbsp;&lt;/li&gt;&lt;li&gt;SIMPLE DESIGN = no requirement for impedance mismatch&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;e.g. storing all employee&#39;s data in one doc instead of multiple tables that require join operations&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;HORIZONTAL SCALING&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;ability to run on large cluster&amp;nbsp;&lt;/li&gt;&lt;li&gt;solves when # of concurrent users increases&lt;/li&gt;&lt;li&gt;easier to scale out since data is related to specific employee is stored in one document&lt;/li&gt;&lt;li&gt;can be transparently replaced without app disruption in case of node failure&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;AVAILABILITY = enhance availability by node replacement can be done without app downtime&amp;nbsp;&lt;/li&gt;&lt;li&gt;support for unstructured and semi structured data&amp;nbsp;&lt;/li&gt;&lt;li&gt;COST = cheaper, open source&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;Types on NoSQL databases&amp;nbsp;&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;KEY-VALUE STORE (Dynamo DB, Reids, Memcached DB)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;key value db use key-value methods like hash tables to store data in key value pairs&amp;nbsp;&lt;/li&gt;&lt;li&gt;key serves as unique primary key and values can be anything from values to complex objects&amp;nbsp;&lt;/li&gt;&lt;li&gt;USE CASE: efficient for session oriented applications&lt;/li&gt;&lt;ul&gt;&lt;li&gt;e.g. product id and type are considered primary key, products considered value&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DOCUMENT&amp;nbsp; (MongoDB, Google Cloud Firestore)&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;designed to store and retrieve documents like XML, JSON, BSON, etc.&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;composed of hierarchal tree data structure that can include maps, collections, and scalar values&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;USE CASE: e-commerce apps, a product with thousands of attributes is unfeasible to store in relational DB due to its impact on reading performance&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;we can store each attribute in a single file for easy management and faster reading speed&amp;nbsp;&lt;/li&gt;&lt;li&gt;also better option for content management apps such as blogs and video platforms&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;COLUMN-ORIENTED/ COLUMNAR (Cassandra, HBase, Hypertable, amazon redshift)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;store data in columns instead of rows; enable access to all entries quickly and efficiently&amp;nbsp;&lt;/li&gt;&lt;li&gt;USE CASE: effifcient for large number of aggregation and data analytics queries&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;reduces the disk I/O requirements&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;GRAPH (Neo4j, Orient DB, Infinite Graph)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;using graph data structure to store data where nodes represent entities and edges show relationships&amp;nbsp;&lt;/li&gt;&lt;li&gt;USE CASE: usiing for social apps&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li style=&quot;font-size: 13px;&quot;&gt;DRAWBACKS&amp;nbsp;&lt;/li&gt;&lt;ul style=&quot;font-size: 13px;&quot;&gt;&lt;li&gt;lack of standardization&amp;nbsp;&lt;/li&gt;&lt;li&gt;porting apps from one type to NoSQL challenging&amp;nbsp;&lt;/li&gt;&lt;li&gt;consistency&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;REPLICATION&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;replication refers to keeping multiple copies of the data at various nodes (preferably global) to achieve availability, scalability, and performance&amp;nbsp;&lt;/li&gt;&lt;li&gt;relatively simple if replicated data don&#39;t require frequent changes&amp;nbsp;&lt;/li&gt;&lt;li&gt;SYNCHRONOUS vs ASYNCHRONOUS&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;SYNCHRONOUS = priomary node waits for acknowledgement from secondary notes about updating the data&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;advantage is all secondary nodes are up to date with primary node&amp;nbsp;&lt;/li&gt;&lt;li&gt;fault is if node crashed, we would still be waiting for successful acknowledgement&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;ASYNCHRONOUS = doesn&#39;t wait and reports success to client after updating itself&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;enables primary node to continue even if secondary node is down&amp;nbsp;&lt;/li&gt;&lt;li&gt;if primary node fails, the werites that weren&#39;t copied to the secondary nodes are lost forever&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;DATA REPLICATION MODELS&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;SINGLE LEADER/ PRIMARY SECONDARY REPLICATION&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;data replicated across mulitiple nodes&amp;nbsp;&lt;/li&gt;&lt;li&gt;one node designated as primary responsible for processing any writes to data stored on the cluster&amp;nbsp;&lt;/li&gt;&lt;li&gt;thjen sends writes to secondary nodes to keep them in sync&amp;nbsp;&lt;/li&gt;&lt;li&gt;primary-secondary is apporopriate when our workload is read heavy&amp;nbsp;&lt;/li&gt;&lt;li&gt;read resilient - secondary nodes can handle read requests in case primary node fails&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;MULTI-LEADER REPLICATION&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;alternative to single leader in that there are multiple primary nodes to avoid drawbacks during asynchronous replication&amp;nbsp;&lt;/li&gt;&lt;li&gt;big disadvantage is conflicts between primary nodes&amp;nbsp;&lt;/li&gt;&lt;li&gt;can handle conflcts by&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;conflict avoidance&amp;nbsp;&lt;/li&gt;&lt;li&gt;last write winds&amp;nbsp;&lt;/li&gt;&lt;li&gt;custom logic&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;peer to peer or leaderless replication&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;no set primary node to avoid SPOF&lt;/li&gt;&lt;li&gt;replication schema can be found in Cassandra&amp;nbsp;&lt;/li&gt;&lt;li&gt;Quorums help resolve inconsistencies&amp;nbsp;&lt;/li&gt;&lt;li&gt;minimum number of members to be present (e.g. min 2 out of 3 successful updates)&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;DATA PARTITIONING&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;data partitioning (SHARDING) ENABLES US TO USE MULTIPLE NODES WHERE EACH NODE MANAGES SOME PART OF THE WHOLE DATA&amp;nbsp;&lt;/li&gt;&lt;li&gt;SHARDING = sharding must be balanced so each partition receives same amount of data&amp;nbsp;&lt;/li&gt;&lt;li&gt;VERTICAL SHARDING&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;used to incrtease speed of data retrieval from a table consisting of columns with very wide text or binary large objects (BLOB)&lt;/li&gt;&lt;li&gt;column with large text or blob is split into different table&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;e.g. employee table divided into two tables: a reduced employee table and an employee picture table&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;primary key employee id is added to both partitioned tables&amp;nbsp;&lt;/li&gt;&lt;li&gt;makes data read and write easier&amp;nbsp;&lt;/li&gt;&lt;li&gt;reconstruction is performed efficiently&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;more amendable to manual partitioning where stakeholders decide how to partition data&amp;nbsp;&lt;/li&gt;&lt;li&gt;horizontal sharding is suitable to automate even&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;HORIZONTAL SHARDING&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;used to divide a table into multiple tables by splitting data row-wise&amp;nbsp;&lt;/li&gt;&lt;li&gt;each partition of original able distributed is called a shard&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;key range based sharding&amp;nbsp;&lt;/li&gt;&lt;li&gt;hash based sharding&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;KEY RANGE BASED SHARDING&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;each partition is assigned an continuous range of keys&amp;nbsp;&lt;/li&gt;&lt;li&gt;ADVANTAGES&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;range query based schema is easy to implement&amp;nbsp;&lt;/li&gt;&lt;li&gt;we precisely know where to look for a specific range of keys&amp;nbsp;&lt;/li&gt;&lt;li&gt;range queries can be performed and kept in sorted order&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;DISADVANTAGES&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;range queries can&#39;t be performed using keys other than the partitioning key&amp;nbsp;&lt;/li&gt;&lt;li&gt;uneven distribution of the traffic can occur which some nodes may have to store more data if keys aren&#39;t properly selected&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;HASH BASED SHARDING&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;uses a hash function on an attribute&amp;nbsp;&lt;/li&gt;&lt;li&gt;use hash function on key and mod by number of partitions&amp;nbsp;&lt;/li&gt;&lt;li&gt;give each partition a range of hashes to which any key that maps would occur inside that range and kept within that range&amp;nbsp;&lt;/li&gt;&lt;li&gt;ADVANTAGES&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;keys are uniformly distributed across nodes&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;DISADVANTAGES&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;can&#39;t perform range queries since keys will be spread over all partitions&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;CONSISTENT HASHING&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;assigns each server in a distributed hash table a place on an abstract circle called a ring irrespective to the number of servers in the table&amp;nbsp;&lt;/li&gt;&lt;li&gt;permits servers and objects to scale without compromising performance&amp;nbsp;&lt;/li&gt;&lt;li&gt;ADVANTAGES&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;easy to horizontal scale&amp;nbsp;&lt;/li&gt;&lt;li&gt;increases throughput and improves latency of app&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;DISADVANTAGES&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;randomly assigning nodes in the ring may cause non uniform distribution&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;apply the following strategyu to rebalance partitions&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;avoid hash mod n&amp;nbsp;&lt;/li&gt;&lt;li&gt;fixed number of partitions&amp;nbsp;&lt;/li&gt;&lt;li&gt;dynamic partitioning&amp;nbsp;&lt;/li&gt;&lt;li&gt;partition proportionally to nodes&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;SERVICE DISCOVERY = we want to read a specific key how do we know which IP address to connect to read&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;allow the client to request anyt node in the network;; if node doesn&#39;t have info. FWD the request to the node that does&amp;nbsp;&lt;/li&gt;&lt;li&gt;routing tier&amp;nbsp;&lt;/li&gt;&lt;li&gt;client already has info to direct contact with node&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;ZOOKEEPER&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;management service keep track of all mappings in the network, and each node connects to zookeeper for info&amp;nbsp;&lt;/li&gt;&lt;li&gt;whenever change in partitioning or node added or removed&amp;nbsp;&lt;/li&gt;&lt;li&gt;zookeeper updates and notifies routing tier abount change&amp;nbsp;&lt;/li&gt;&lt;li&gt;Hbase, kafka, and solrcloud use zookeeper&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;TRADE-OFFS&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Centralized Database - Advantages&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;data maintenance like updates and backups are easy&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;stronger consistency and ACID transactions&lt;/span&gt;&lt;/li&gt;&lt;li&gt;much simpler programming model&lt;/li&gt;&lt;li&gt;more efficient for businesses with small amount of data to store that can reside on a single node&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Centralized Database - Disadvantages&lt;/li&gt;&lt;ul&gt;&lt;li&gt;can slow down, causing high latency for end users&lt;/li&gt;&lt;li&gt;single point of failure&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Distributed Database - Advantages&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;fast and easy to access data because data is retrieved from nearest db shard&lt;/li&gt;&lt;li&gt;different levels of distribution transparency can be stored in separate places&lt;/li&gt;&lt;li&gt;intensive transactions can be divided into multiple optimized subqueries&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Distributed Database - Disadvantages&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;sometimes data required from multiple sites , taking more time&lt;/li&gt;&lt;li&gt;relations partitioned vertically or horizontally among different nodes&lt;/li&gt;&lt;li&gt;difficult to maintain consistency of data among sites&lt;/li&gt;&lt;li&gt;update and backups take time to synchronize&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
          <mxGeometry x="1748" y="-709" width="1216" height="2894" as="geometry" />
        </mxCell>
        <mxCell id="cltM6eKxGFpbqBlGMILz-2" value="&lt;b style=&quot;font-size: 32px;&quot;&gt;&lt;font style=&quot;font-size: 32px;&quot;&gt;&lt;u style=&quot;&quot;&gt;&lt;i style=&quot;&quot;&gt;STEPS FOR SYSTEM DESIGN FORMAT&lt;/i&gt;&lt;/u&gt;&lt;/font&gt;&lt;/b&gt;&lt;div style=&quot;font-size: 32px;&quot;&gt;&lt;ol style=&quot;&quot;&gt;&lt;li style=&quot;&quot;&gt;&lt;b&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;UNDERSTAND THE PROBLEM - ESTABLISH THE DESIGN SCOPE&amp;nbsp;&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;&lt;ol style=&quot;font-size: 24px;&quot;&gt;&lt;li&gt;&lt;b&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;ASSUMPTIONS/ CLARIFYING QUESTIONS&amp;nbsp;&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;FUNCTIONAL REQUIREMENTS&amp;nbsp;&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;NON-FUNCTIONAL REQUEIREMENTS&amp;nbsp;&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 24px;&quot;&gt;&lt;b&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;PROPOSE HIGH LEVEL DESIGN / BUY IN&amp;nbsp;&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;&lt;ol style=&quot;font-size: 24px;&quot;&gt;&lt;li&gt;&lt;b&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;API&amp;nbsp;&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;BEGIN DIAGRAM&amp;nbsp;&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li style=&quot;font-size: 24px;&quot;&gt;&lt;b&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;DEEP DIVE DESIGN&amp;nbsp;&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;&lt;li style=&quot;font-size: 24px;&quot;&gt;&lt;b style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;WRAP UP&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
          <mxGeometry x="836" y="2367" width="812" height="383" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
